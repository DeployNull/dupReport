WELCOME TO dupReport!!!

dupReport is an email-based reporting system for Duplicati. It will gather all your Duplicati backup
status emails and produce a summary report on what Duplicati backup jobs were run and their success or failure.

Current Release Version: 2.0.4

The GitHub "master" branch contains the latest production (stable...mostly) code.  See the "changelog" file 
for release history and feature/bug fixes.

Other GitHub branches may contains the latest test code, development features, and other 
probably-unstable code. Swim here at your own risk. Void where prohibited. Batteries not included. 
Freshest if eaten before date on carton. For official use only. Use only in a well-ventilated area. 
Keep away from fire or flames. May contain peanuts. Keep away from pets and small children. Unless you're
looking for some adventure (or you've been asked specifically to test something in there), best stay away
from that area. 

Bug reports and feature requests can be made on GitHub in the "Issues" section.

The discussion group for dupReport is on the Duplicati Forum. (forum.duplicati.com)

The program is released under an MIT license. Please see the LICENSE file for details.

Enjoy!


Background
----------
One CrashPlan feature that Duplicati could not replicate was coordinated email status reporting. 
CrashPlan had a really nice feature whereby it would gather up the current backup status for all 
your systems and mail you a consolidated report on a periodic basis. It was a great way to make 
sure all your backups were current and to notify you if something was wrong. 
 
Duplicati has no such capability. You can configure it to send you email when backup jobs completed, 
but you get a separate email for each backup job that runs. In the configuration I have (9 systems 
backing up to 2 different storage services in various combinations) that's 14 different emails per day. 
Compare that with CrashPlan's one summary email per day and you can see how this was a problem. Others 
on the Duplicati discussion forum noticed it, too. That started me thinking about developing a tool to 
provide summarized email notification for Duplicati users. 
 
dupReport was born. 
 
Source-Destination Pairs
------------------------
dupReport identifies backup jobs as a series of Source/Destination pairs.

dupReport uses Source-Destination Pairs to display each source job and target storage separate.
The default dupReport configuration requires that jobs be named in a way that indicates what is protected,
and where it is going.
For instance, a job named "Fred_Home_Desktop-Homers_Minio" would show up in the dupReport as:
***** Fred_Home_Desktop to Homers_Minio *****

Note that spaces in job names are not supported, at least by the default pattern matching.

Source/Destination pairs are specified in dupReport in the following format:
 
<Source><delimiter><Destination>
 
Where:
<Source> is a series of alphanumeric characters
<delimiter> is a single character (typically one of the "special" characters) and CAN NOT be 
a character you use in any of your Source/Destination pairs
<Destination> is a series of alphanumeric characters
 
dupReport allows you to define the specification of the Source, Destination, and Delimiter in the 
dupReport.rc file in the [main] section. Each specification is the regular expression definition of 
that element. The defaults are:
 
[main]
srcregex=\w*
destregex=\w*
srcdestdelimiter=-

Together the full source/destination regex is:

<srcregex><srcdestdelimiter><destregex>
 
You can modify the specification of these elements by replacing each with a regular expression 
defining how dupReport can find that element in a email's subject line.
 
WARNING! dupReport relies on the Source/Destination pair format for all of its operations. 
If you do not properly specify your Source/Destination pair formats in both the program (through 
the .rc file) and in Duplicati (through proper job naming) none of this will work for you. That will make us both very sad. :-(

Identifying Emails of Interest
------------------------------
dupReport scans the identified mailbox looking for backup job emails. However, there may be hundreds
(or thousands) of emails in the inbox, only a few of which contain information about Duplicati backup
jobs. dupReport identifies "Emails of Interest" by matching the email's subject line against a pattern
defined in the dupReport.rc file. If the pattern matches, the email is analyzed. If the pattern does
not match, the email is ignored.
 
The default pattern it looks for is the phrase "Duplicati backup report for" which is the default used 
for Duplicati's send-mail-subject advanced option. You can change the text that dupReport scans by 
adjusting the subjectregex parameter in the dupReport.rc file in the [main] section. subjectregex is 
the regular expression definition for the desired phrase. The default for this specification is:
 
[main]
subjectregex=^Duplicati Backup report for
 
If you change the subjectregex parameter, be sure that it will match the text specified in the Duplicati 
send-mail-subject advanced option.

System Requirements
-------------------
dupReport has been tested on Linux (Debian 8) and Windows 10. It comes as a single Python script so it 
should be portable on any number of other environments. The only other software dupReport needs is Python3. 
Installation instructions for Python are beyond our scope here, but instructions are readily available on the Internet.

Installing dupReport 
--------------------
dupreport comes a single Python script that you can place in a desired directory. Once in place execute the following command:

dupReport.py -i

This will perform the following actions:
Create and initialize the dupReport database (dupReport.db)
Create a default configuration file (dupReport.rc)
Both of these files will be created in the same directory where the dupReport.py script is located. 

Edit the dupReport.rc file and change any desired parameters. The default dupReport.rc file contains 
explanations for each of the parameters to help you make any changes. Save the file when complete.

To run the program simply enter "dupReport.py" at the command prompt, plus any options you may want to add.
 
Command Line Options
--------------------
dupReport has the following command line options:

-h, --help (show this help message and exit)

-r RCPATH, --rcpath RCPATH (Define directory for dupReport.rc file. Default is directory where dupReport.py program is located.)

-d DBPATH, --dbpath DBPATH (Define directory for dupReport.db file. Default is directory where dupReport.py program is located.)

-v {0,1,2, 3}, --verbose {0,1,2, 3} (Log file verbosity. Same as [main]verbose= in rc file.)

-V, --version (dupReport program and database version info.)

-l LOGPATH, --logpath LOGPATH (Define directory for dupReport.log file. Default is directory where dupReport.py 
   program is located. Same as [main]logpath= in rc file.)

-a, --append  (Append new logs to log file. Same as [main]logappend= in rc file.)

-m {mega,giga,none}, --mega {mega,giga,none} (Convert file sizes to megabytes or gigabytes. Same as [main]sizereduce= in rc file.)

-i, --initdb (Initialize database to empty state)

-c, --collect (Collect new emails only. Don't run report. -c and -t options can not be used together.)

-t, --report (Run summary report only. Don't collect emails. -c and -t options can not be used together.)

Many command line options have equivalent options in the dupReport.rc file. If an option is specified on 
both the command line and the .rc file, the command line option takes precedence.

dupReport.rc Configuration
--------------------------
The dupReport.RC file contains configuration information for dupReport to run properly. Here is a sample 
dupReport.rc file with annotations to help you understand the various options

### dupReport.rc
# Configuration file for dupReport
# [main] section contains general program information
[main]
# Path to dupReport Sqlite database (directory only). Defaults to dupReport.db in dupReport script directory
# Can be overridden by -d command line option
dbpath=

# Path to log file (directory only). Defaults to dupReport.log in dupReport script directory
# Can be overridden by -l command line option
logpath=

# Level of log file verbosity
# 0=none  1=Informational  2=Detailed  3=Please make it stop!!!
# Can be overridden by -v command line option
verbose=1

# Append new logs to log file. False = overwrite log file each run
# Can be overridden by -a command line option
logappend=false

# Display file sizes in megabytes or gigabytes. 
# Options = 'mega', 'giga' or 'none'
# Can be overridden by -m command line option
sizereduce=mega

# Regular expression to find backup message emails.
# Should somewhat match text from 
# send-mail-subject advanced option in Duplicati
subjectregex=^Duplicati Backup report for

# Subject for summary emails
summarysubject=Duplicati Backup Summary Report

# Regular expressions for <source><delimiter><destion> 
# in email subject line
srcregex=\w*
destregex=\w*
srcdestdelimiter=-

# Email Display Table Options
border=1
padding=5

# Report section display. Indicate whether or not to display Errors,
# Warnings, and/or Messages in reports. All options here are true/fales
disperrors=true
dispwarnings=true
dispmessages=false

# Sort email report by source or by destination.
sortorder=source

# Specify the format for dates that appear in the EndTime and BeginTime
# fields of Duplicati report emails.
# Acceptable formats are:
#    MM/DD/YYYY
#    DD/MM/YYYY
#    MM-DD-YYYY
#    DD-MM-YYYY
#    MM.DD.YYYY
#    DD.MM.YYYY
#    YYYY/MM/DD
#    YYYY/DD/MM
#    YYYY-MM-DD
#    YYYY-DD-MM
#    YYYY.MM.DD
#    YYYY.DD.MM
# The default is 'MM/DD/YY'.
# If there some funkiness in your report dates (especially of your locale doesn't
# use U.S.-style dates), or if you are getting program crashes around the date/time
routines, you might try changing this value
dateformat=MM/DD/YY

# Specify the format for times that appear in the EndTime and BeginTime
# fields of Duplicati report emails.
# Acceptable formats are:
#    HH:MM:SS
# The default is 'HH:MM:SS'.
timeformat=HH:MM:SS

# [incoming] section contains parameters for 
# incoming (downloaded) email. 
[incoming]

# Transport options: 'pop3' or 'imap'
transport=pop3

# Server and port for incoming server
server=pop3.server.com
port=995

# Encryption options: 'none' 'ssl' 'tls'
encryption=ssl

# Account an dpassword to log into POP/IMAP email server for download
account=me@mydomain.com
password=********

# Inbox folder where emails are stored.
# Used for IMAP. Will be ignored for POP3, 
# but MUST be present or you'll get nasty error messages.
folder=INBOX

# [outgoing section contains parameters for outgoing (sent) email. 
# Only current supported protocol is SMTP.
[outgoing]

# Outgoing server and port
server=smtp.server.com
port=587

# Encryption options: 'none' 'ssl' 'tls'
encryption=tls

# account: ID/password for smtp server
account=me@mydomain.com
password=********

# Sender & receiver for outgong report email
sender=me@mydomain.com
receiver=me@mydomain.com
